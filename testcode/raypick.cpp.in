#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/actions/SoRayPickAction.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoPickStyle.h>
#include <Inventor/nodes/SoPointSet.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeRender.h>

// *************************************************************************

static SoCoordinate3 * pickpoints = NULL;

// *************************************************************************

static void
event_cb(void * ud, SoEventCallback * n)
{
  const SoMouseButtonEvent * mbe = (SoMouseButtonEvent *)n->getEvent();

  if (mbe->getButton() == SoMouseButtonEvent::BUTTON1 &&
      mbe->getState() == SoButtonEvent::DOWN) {
    So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *)ud;

    SoRayPickAction rp(viewer->getViewportRegion());
    rp.setPoint(mbe->getPosition());
    rp.apply(viewer->getSceneManager()->getSceneGraph());

    SoPickedPoint * point = rp.getPickedPoint();
    if (point == NULL) {
      (void)fprintf(stderr, "\n** miss! **\n\n");
      return;
    }

    n->setHandled();

    (void)fprintf(stdout, "\n");

    SbVec3f v = point->getPoint();
    SbVec3f nv = point->getNormal();
    (void)fprintf(stdout, "point=<%f, %f, %f>, normvec=<%f, %f, %f>\n",
                  v[0], v[1], v[2], nv[0], nv[1], nv[2]);

    // Adds a point marker to the picked point.
    const int idx = pickpoints->point.getNum();
    pickpoints->point.set1Value(idx, v);
  }
}

// *************************************************************************

static SoSeparator *
pickedPointsSubGraph(void)
{
  SoSeparator * picksep = new SoSeparator;
  SoPickStyle * pickstyle = new SoPickStyle;
  pickstyle->style = SoPickStyle::UNPICKABLE;
  picksep->addChild(pickstyle);

  SoDrawStyle * drawstyle = new SoDrawStyle;
  drawstyle->pointSize = 10;
  picksep->addChild(drawstyle);

  // The SoCoordinate3 pointer is a global variable.
  pickpoints = new SoCoordinate3;
  picksep->addChild(pickpoints);

  picksep->addChild(new SoPointSet);

  return picksep;
}

// *************************************************************************


static void
setDot(uint32_t * pData, SbVec3s & dim,
       float X, float Y, float Z,
       unsigned char R,
       unsigned char G,
       unsigned char B,
       unsigned char A)
{
  int nX = int(dim[0]*X);
  int nY = int(dim[1]*Y);
  int nZ = int(dim[2]*Z);

  //  if (A < 128) A = 0;
  // if (A >= 128) A = 255;
  A >>= 2;

  if (R < 128) R = 0;
  if (R >= 128) R = 255;

  int pixel = (A<<24) + (B<<16) + (G<<8) + R;
  pData[nZ*dim[0]*dim[1] + nY*dim[0] + nX] = pixel;
  pData[(nZ+1)*dim[0]*dim[1] + nY*dim[0] + nX] = pixel;
  pData[(nZ-1)*dim[0]*dim[1] + nY*dim[0] + nX] = pixel;
  pData[nZ*dim[0]*dim[1] + (nY+1)*dim[0] + nX] = pixel;
  pData[nZ*dim[0]*dim[1] + (nY-1)*dim[0] + nX] = pixel;
  pData[nZ*dim[0]*dim[1] + nY*dim[0] + (nX+1)] = pixel;
  pData[nZ*dim[0]*dim[1] + nY*dim[0] + (nX-1)] = pixel;
}

void *
generateRGBAVoxelSet(SbVec3s & dim)
{
  uint32_t * voxels = new uint32_t[dim[0] * dim[1] * dim[2]];
  (void)memset(voxels, 0, dim[0] * dim[1] * dim[2]*4);

  float t = 0;

  while (t < 50) {
    float x = sin((t + 1.4234)*1.9);
    float y = cos((t*2.5) - 10);
    float z = cos((t - 0.23123)*3)*sin(t + 0.5);

    setDot(voxels, dim,
           x*sin(t)*0.45 + 0.5,
           y*0.45 + 0.5,
           z*cos(t)*0.45 + 0.5,
           (unsigned char)(255.0*cos(t)),
           (unsigned char)(255.0*sin(t)),
           255,
           255);

    t += 0.001;
  }

  return voxels;
}

// *************************************************************************

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);

  SoSeparator * root = new SoSeparator;
  root->ref();

  root->addChild(pickedPointsSubGraph());

  SoEventCallback * ecb = new SoEventCallback;
  ecb->addEventCallback(SoMouseButtonEvent::getClassTypeId(), event_cb, viewer);
  root->addChild(ecb);

  SbVec3s dim(64, 64, 64);
  void * voxels = generateRGBAVoxelSet(dim);

  SoVolumeData * voldata = new SoVolumeData();
  voldata->setVolumeData(dim, voxels, SoVolumeData::RGBA);
  root->addChild(voldata);

  SoTransferFunction * transfun = new SoTransferFunction();
  root->addChild(transfun);

  SoVolumeRender * volrend = new SoVolumeRender();
  root->addChild(volrend);

  viewer->setSceneGraph(root);
  viewer->show();
  So@Gui@::show(window);

  So@Gui@::mainLoop();

  delete viewer;
  root->unref();
  return 0;
}

// *************************************************************************
