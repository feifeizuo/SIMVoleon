#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoTranslation.h>

#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/nodes/SoVolumeRendering.h>
#include <VolumeViz/nodes/SoOrthoSlice.h>
#include <VolumeViz/readers/SoVRVolFileReader.h>

#include "OrthoSliceHandler.h"
#include "TransferFunctionHandler.h"
#include "utility.h"

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  SoSeparator * root = new SoSeparator;
  root->ref();

  uint8_t * voxeldata = NULL;
  SoVolumeData * volumedata = NULL;

  // Add SoVolumeData to scene graph

  if (argc != 2) { // Generate dataset
    SbVec3s dim = SbVec3s(64, 64, 64);
    voxeldata = generateRGBAVoxelSet(dim);

    volumedata = new SoVolumeData();
    volumedata->setVolumeData(dim, voxeldata, SoVolumeData::RGBA);
    volumedata->setVolumeSize(SbBox3f(-64, -32, -32, 64, 32, 32));
    root->addChild(volumedata);
  }
  else { // Read VOL file
    SoVRVolFileReader * filereader = new SoVRVolFileReader;
    filereader->setUserData(argv[1]);

    volumedata = new SoVolumeData();
    volumedata->setReader(filereader);
    root->addChild(volumedata);
  }

  // Add TransferFunction (color map) to scene graph
  SoTransferFunction * transfunc = new SoTransferFunction();
  root->addChild(transfunc);

  TransferFunctionHandler * tfdia = new TransferFunctionHandler(transfunc);

  // Add SoOrthoSlice to scene graph
  SoOrthoSlice * orthoslice = new SoOrthoSlice();
  root->addChild(orthoslice);

  OrthoSliceHandler * osdia = new OrthoSliceHandler(orthoslice, volumedata);

  // Add SoVolumeRender to scene graph
  if (0) { // enable or disable this at will
    SoVolumeRender * volrend = new SoVolumeRender();
    root->addChild(volrend);
  }

  // These spheres are here just for testing the cutting
  // functionality.
  {
    const SbBox3f & volumebbox = volumedata->getVolumeSize();
    float dx, dy, dz;
    volumebbox.getSize(dx, dy, dz);
    float mindim = SbMin(dx, SbMin(dy, dz));

    SoSphere * sph = new SoSphere;
    sph->radius = mindim * 0.1f;

    SoTranslation * translate0 = new SoTranslation;
    translate0->translation.setValue(0, 0, volumebbox.getMin()[2] - dz);
    SoTranslation * translate1 = new SoTranslation;
    translate1->translation.setValue(0, 0, volumebbox.getMax()[2] + dz);
    root->addChild(translate0);
    root->addChild(sph);
    root->addChild(translate1);
    root->addChild(sph);
  }

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setBackgroundColor(SbColor(0.1f, 0.3f, 0.5f));
  viewer->setSceneGraph(root);

  viewer->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();
  delete viewer;

  root->unref();
  delete[] voxeldata;

  return 0;
}
