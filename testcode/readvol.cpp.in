#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/sensors/SoTimerSensor.h>
#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/nodes/SoVolumeRendering.h>
#include <VolumeViz/readers/SoVRVolFileReader.h>

#include <Inventor/errors/SoDebugError.h>

static void
changeTransferColormap(void * d, SoSensor * sensor)
{
  SoTransferFunction * tf = (SoTransferFunction *)d;

  int newval= (tf->predefColorMap.getValue() + 1);
  newval %= (SoTransferFunction::SEISMIC + 1);
  if (newval == 0) newval = SoTransferFunction::GREY;

  SoDebugError::postInfo("changeTransferColormap", "newval==%d", newval);

  tf->predefColorMap = newval;
}

static void
setColorMapALPHA(SoMFFloat * cmap)
{
  cmap->setNum(256);
  for (int idx=0; idx < 256; idx++) {
    // Make a "staircase" pattern.
    cmap->set1Value(idx, float(idx - (idx % 32)) / 255.0f);
  }
}

static void
setColorMapLUMALPHA(SoMFFloat * cmap)
{
  cmap->setNum(2 * 256);
  for (int idx=0; idx < 256; idx++) {
    cmap->set1Value(idx * 2, float(idx) / 255.0f);
    cmap->set1Value(idx * 2 + 1, float(255 - idx) / 255.0f);
  }
}

static void
setColorMapRGBA(SoMFFloat * cmap)
{
  cmap->setNum(4 * 256);
  for (int idx=0; idx < 256; idx++) {
    cmap->set1Value(idx * 4 + 0, float(255 - idx) / 255.0f);
    cmap->set1Value(idx * 4 + 1, float(255 - idx) / 255.0f);
    cmap->set1Value(idx * 4 + 2, 1.0f);
    cmap->set1Value(idx * 4 + 3, 0.5f);
  }
}

int
main(int argc, char ** argv)
{
  if (argc < 2) {
    fprintf(stderr, "\nUsage: %s dataset.vol\n\n", argv[0]);
    exit(1);
  }

  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  SoSeparator *root = new SoSeparator;
  root->ref();

  SoVRVolFileReader * filereader = new SoVRVolFileReader;
  filereader->setUserData(argv[1]);

  SbBox3f size;
  SoVolumeData::DataType type;
  SbVec3s dim;
  filereader->getDataChar(size, type, dim);
  
  // Add VolumeData to scene graph
  SoVolumeData * voldata = new SoVolumeData();
  voldata->setReader(filereader);
  // FIXME: if setVolumeSize() is not invoked, no default is set, it
  // seems. 20021120 mortene.
//   voldata->setVolumeSize(SbBox3f(-1, -1, -1, 1, 1, 1));
//   voldata->setVolumeSize(SbBox3f(-2, -2, -1, 2, 2, 1));
//   voldata->setVolumeSize(SbBox3f(-160, -160, -17, 160, 160, 17));

  root->addChild(voldata);

#if 1 // FIXME: handle missing transferfunction. 20021117 mortene.
  // Add TransferFunction (color map) to scene graph
  SoTransferFunction *transfunc = new SoTransferFunction();
  if (argc == 3) transfunc->predefColorMap = atoi(argv[2]); // XXX
  transfunc->reMap(64, 192);
  root->addChild(transfunc);

  transfunc->predefColorMap = SoTransferFunction::NONE;
//   transfunc->colorMapType = SoTransferFunction::ALPHA;
//   setColorMapALPHA(&transfunc->colorMap);
//   transfunc->colorMapType = SoTransferFunction::LUM_ALPHA;
//   setColorMapLUMALPHA(&transfunc->colorMap);
  transfunc->colorMapType = SoTransferFunction::RGBA;
  setColorMapRGBA(&transfunc->colorMap);
#endif

  // Add VolumeRender to scene graph
  SoVolumeRender * pVolRend = new SoVolumeRender();
  root->addChild(pVolRend);

  SoLightModel * lm = new SoLightModel;
  lm->model = SoLightModel::BASE_COLOR;
  root->addChild(lm);

  SoDrawStyle *drawStyle = new SoDrawStyle;
  drawStyle->style = SoDrawStyle::LINES;
  root->addChild(drawStyle);

  SoCube * volcage = new SoCube;
  const SbBox3f volspan = voldata->getVolumeSize();

  float dx, dy, dz;
  volspan.getSize(dx, dy, dz);
  volcage->width = dx;
  volcage->height = dy;
  volcage->depth = dz;
  root->addChild(volcage);

  So@Gui@ExaminerViewer * ex = new So@Gui@ExaminerViewer(window);
  ex->setSceneGraph(root);

#if 0
  SoTimerSensor sensor(changeTransferColormap, transfunc);
  sensor.setInterval(10);
  sensor.schedule();
#endif

  ex->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete ex;
  delete filereader;
  root->unref();

  return 0;
}
